#include <aes_cipherer.h>

#include <gtest/gtest.h>

#include <array>


using block_array = std::array<uint8_t, aes::BLOCK_SIZE>;


TEST(AesCipherTestCase, Aes128Test) {
    std::array<uint8_t, aes::KEY128_SIZE> key{
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    };
    block_array input{
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
    };
    block_array correct_output{
            0x69, 0xC4, 0xE0, 0xD8, 0x6A, 0x7B, 0x04, 0x30, 0xD8, 0xCD, 0xB7, 0x80, 0x70, 0xB4, 0xC5, 0x5A
    };
    block_array output{};

    aes::aes_cipherer cipherer{aes::aes128_key{key}};
    cipherer.cipher(input, output);
    EXPECT_EQ(output, correct_output);
}

TEST(AesCipherTestCase, Aes192Test) {
    std::array<uint8_t, aes::KEY192_SIZE> key{
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
            0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
    };
    block_array input{
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
    };
    block_array correct_output{
            0xDD, 0xA9, 0x7C, 0xA4, 0x86, 0x4C, 0xDF, 0xE0, 0x6E, 0xAF, 0x70, 0xA0, 0xEC, 0x0D, 0x71, 0x91
    };
    block_array output{};

    aes::aes_cipherer cipherer{aes::aes192_key{key}};
    cipherer.cipher(input, output);
    EXPECT_EQ(output, correct_output);
}

TEST(AesCipherTestCase, Aes256Test) {
    std::array<uint8_t, aes::KEY256_SIZE> key{
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    };
    block_array input{
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
    };
    block_array correct_output{
            0x8E, 0xA2, 0xB7, 0xCA, 0x51, 0x67, 0x45, 0xBF, 0xEA, 0xFC, 0x49, 0x90, 0x4B, 0x49, 0x60, 0x89
    };
    block_array output{};

    aes::aes_cipherer cipherer{aes::aes256_key{key}};
    cipherer.cipher(input, output);
    EXPECT_EQ(output, correct_output);
}
